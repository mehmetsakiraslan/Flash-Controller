`timescale 1ns / 1ps


module Top_Module_for_Test(
input            i_clk,          // Sistem frekansÄ±na sahip clock
input            i_reset,
input            i_dir,
input            i_spd,

// Flash Controller i/o
inout  [3:0]        io_qspi_data,
output              out_qspi_cs 
 
    );
    
 
 reg               in_write  ;
 reg               in_op_cont;
 reg [23:0]        in_address;
 reg [31:0]        in_word   ;
         
 wire[31:0]        out_word  ;    
 wire              out_valid ;
 
 wire              out_qspi_sck;
 
 
 
  Low_Level_Controller(
   i_clk  ,       
   i_reset,                                                           
                                                                      
   in_write,  
   in_op_cont,                                                        
   in_address,                                                        
   in_word,                                                           
   i_spd,                                                            
   i_dir,                                                            
   out_word,                                                          
   out_valid,                                                                                                                  
                                                                      
   io_qspi_data,                                                      
   out_qspi_cs,
   out_qspi_sck                                                  
  );                                                             
  
  //*****************************
    
	// The following primitive is necessary in many designs order to gain
	// access to the o_qspi_sck pin.  It's not necessary on the Arty,
	// simply because they provide two pins that can drive the QSPI
	// clock pin.
	wire	[3:0]	su_nc;	// Startup primitive, no connect
    STARTUPE2 #(
		// Leave PROG_USR false to avoid activating the program
		// event security feature.  Notes state that such a feature
		// requires encrypted bitstreams.
		.PROG_USR("FALSE"),
		// Sets the configuration clock frequency (in ns) for
		// simulation.
		.SIM_CCLK_FREQ(0.0)
	) STARTUPE2_inst (
	// CFGCLK, 1'b output: Configuration main clock output -- no connect
	.CFGCLK(su_nc[0]),
	// CFGMCLK, 1'b output: Configuration internal oscillator clock output
	.CFGMCLK(su_nc[1]),
	// EOS, 1'b output: Active high output indicating the End Of Startup.
	.EOS(su_nc[2]),
	// PREQ, 1'b output: PROGRAM request to fabric output
	//	Only enabled if PROG_USR is set.  This lets the fabric know
	//	that a request has been made (either JTAG or pin pulled low)
	//	to program the device
	.PREQ(su_nc[3]),
	// CLK, 1'b input: User start-up clock input
	.CLK(1'b0),
	// GSR, 1'b input: Global Set/Reset input
	.GSR(1'b0),
	// GTS, 1'b input: Global 3-state input
	.GTS(1'b0),
	// KEYCLEARB, 1'b input: Clear AES Decrypter Key input from BBRAM
	.KEYCLEARB(1'b0),
	// PACK, 1-bit input: PROGRAM acknowledge input
	//	This pin is only enabled if PROG_USR is set.  This allows the
	//	FPGA to acknowledge a request for reprogram to allow the FPGA
	//	to get itself into a reprogrammable state first.
	.PACK(1'b0),
	// USRCLKO, 1-bit input: User CCLK input -- This is why I am using this
	// module at all.
	.USRCCLKO(out_qspi_sck),
	// USRCCLKTS, 1'b input: User CCLK 3-state enable input
	//	An active high here places the clock into a high impedence
	//	state.  Since we wish to use the clock as an active output
	//	always, we drive this pin low.
	.USRCCLKTS(1'b0),
	// USRDONEO, 1'b input: User DONE pin output control
	//	Set this to "high" to make sure that the DONE LED pin is
	//	high.
	.USRDONEO(1'b1),
	// USRDONETS, 1'b input: User DONE 3-state enable output
	//	This enables the FPGA DONE pin to be active.  Setting this
	//	active high sets the DONE pin to high impedence, setting it
	//	low allows the output of this pin to be as stated above.
	.USRDONETS(1'b1)
	);
    //*****************************
    
    
    
    
  always@* begin
    if((i_dir == 0) && (i_spd == 0)) begin
        in_write    = 1;
        in_op_cont  = 1;
        in_address  = 97;
        
        
    end
    else if((i_dir == 1) && (i_spd == 0)) begin
        in_write    = 1;
        in_op_cont  = 1;
        in_address  = 97;
        
        
    end
    else if((i_dir == 0) && (i_spd == 1)) begin
        in_write    = 1;
        in_op_cont  = 1;
        in_address  = 97;
        in_word     = 19;
        
    end
    else if((i_dir == 0) && (i_spd == 0)) begin
        in_write    = 1;
        in_op_cont  = 1;
        in_address  = 97;
        in_word     = 3;
        
    end
  end                                                     
                                                                      
    
endmodule
